pipeline {
    agent any

    environment {
        // Set Go environment variables
        GO111MODULE = 'on'
        GOROOT = tool(name: 'go') // Adjust Go version as per your setup in Jenkins
        GOPATH = "${env.WORKSPACE}/go"
        PATH = "${env.GOROOT}/bin:${env.PATH}"
    }

    stages {

        stage('SCM') {
            steps {
                echo 'Fetching code from Repo'
                git branch: 'master', url: 'https://github.com/PrashobVP/coursemanagement.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    echo 'Installing Go dependencies...'
                    sh 'go mod download'
                }
            }
        }

        stage('Install Trivy') {
            steps {
                echo 'Installing Trivy'
                sh '''
                    mkdir -p $HOME/bin
                    curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b $HOME/bin
                    export PATH=$HOME/bin:$PATH
                '''
            }
        }

        stage("Trivy: Filesystem scan") {
            steps {
                echo 'Running Trivy scan'
                sh 'trivy filesystem --exit-code 1 --severity HIGH,CRITICAL .'
            }
        }

        stage('Dependency-Check') {
            steps {
                dependencyCheck additionalArguments: '--scan . --out .', odcInstallation: 'OWASP'
            }
        }

        

        stage('Build') {
            steps {
                script {
                    echo 'Building the Go application...'
                    sh 'go build -o bin/app'
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    echo 'Running tests...'
                    sh 'go test ./...'
                }
            }
        }

        stage('BUILD Docker IMAGE for APP & DB server') {
            steps {
                echo 'Building the Docker Image'
                script {
                    sh 'docker --version'
                    
                }
            }
        }

        stage('PUSH App image TO Docker HUB') {
            steps {
                echo 'Pushing the docker images to Docker Hub'
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
                        
                    
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                echo 'Starting Kubernetes deployment'
                script {
                    dir('coursemanagement/K8S') {
                        sh 'ls -l'
                        sh kubectl apply -f app-deployment.yaml 

                        
                    }
                }
            }
        }

                
  
    }

    post {
        always {
            // Archive test results and build artifacts
            archiveArtifacts artifacts: 'bin/*', allowEmptyArchive: true
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
